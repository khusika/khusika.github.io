#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2023 Khusika Dhamar Gusti

RED="\033[01;31m"
YLW="\033[01;33m"
RST="\033[0m"
BIN="./bin/$(go env GOARCH)/hugo"
SRC="./src"

if ! [ -x "$(command -v upx)" ]; then
  echo -e "${RED}Build failed: ${YLW}\e]8;;https://upx.github.io\aUPX\e]8;;\a does not exist."
  exit
fi

if [ "$(go env GOOS)" = "linux" ] || [ "$(go env GOOS)" = "android" ] && [ "$(go env GOARCH)" = "amd64" ] || [ "$(go env GOARCH)" = "arm64" ]; then
  if [ -d "${SRC}/.git" ]; then
      echo -e "${RED}Hugo source exist, ${YLW}checking out with the latest patch...${RST}"
      (cd ${SRC} && git fetch origin master && git checkout -f origin/master && cd ../)
    else
      echo -e "${RED}Hugo source does not exist, ${YLW}cloning the repository...${RST}"
      (git clone https://github.com/gohugoio/hugo -b master src)
  fi
  if [ -x "$(command -v "${BIN}")" ]; then
    v1="$("${BIN}" version | sed -e 's/.*-\(.*\)+extended.*/\1/')"
  else
    v1="0"
  fi
  v2="$(cd ${SRC} && git rev-parse HEAD && cd ../)"
  if [ "${v1}" != "${v2}" ]; then
    for patch in ./patch/*.patch
    do
      if [ -f "${patch}" ]; then
        echo -e "${YLW}Applying patch...${RST}"
        (cd ${SRC} && git apply --stat ".${patch}" && git apply ".${patch}" && cd ../)
      fi
    done
    echo -e "${YLW}Building hugo binary...${RST}"
    (go clean -C ${SRC} && export CGO_ENABLED="1")
    (go build -C ${SRC} -ldflags="-s -w -X github.com/gohugoio/hugo/common/hugo.vendorInfo=khusika.dev" --tags extended -o ".${BIN}")
    (upx --best --lzma "${BIN}")
    if [ -d "./.git" ]; then
      echo -e "${RED}Git: ${YLW}Add binary into git...${RST}"
      (git add "${BIN}")
      (git commit -s -S -m "hugo: Update to gohugoio/hugo@$(cd ${SRC} && git rev-parse --short HEAD && cd ../)" -m "[deploy]")
    fi
    if ! [ "$(cd ${SRC} && git status --porcelain | wc -l)" = "0" ]; then
      echo -e "${RED}Build: ${YLW}Cleanup src local changes...${RST}"
      (cd ${SRC} && git restore . && cd ../)
    fi
    echo -e "${RED}Build: ${YLW}Completed${RST}"
  else
    echo -e "${RED}Build canceled: ${YLW}Your hugo version is already with the latest version"
    exit
  fi
else
  echo -e "${RED}Build failed: ${YLW}Detected $(go env GOOS)/$(go env GOARCH), unsupported OS and Arch version.${RST}"
  exit
fi